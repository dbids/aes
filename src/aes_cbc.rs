//! AES Cipher Block Chaining (CBC) Mode of Operation
//  Devin Bidstrup 6/27/25

use crate::aes::{aes_128, aes_192, aes_256};
use std::convert::TryInto;

const BLOCKLEN: usize = 16; // Block length in bytes - AES is 128b block only

/// This function applies AES-128-CBC encryption or decryption in place to each block in the input data
/// using the specified key. The operation is determined by the `is_encrypt` parameter.
///
/// For encrpytion in AES-CBC mode each block of plaintext is XORed with the previous ciphertext block before being encrypted.
/// The first block is the only execption where, the initialization vector (IV) is used to XOR'd with the plaintext instead.
/// For decryption in AES-CBC mode each block of ciphertext is decrypted and then XOR'd with the previous ciphertext block to produce the plaintext.
/// Again the IV is used for the first block instead.
///
/// # Arguments
/// * `key` - The AES key to use for encryption or decryption. Given as a slice of bytes.  Must be either 16, 24, or 32 bytes long (128, 192, or 256 bits).
/// * `data` - An immutable reference to a slice of bytes to process.  Length must be a multiple of 16 bytes.
/// * `iv` - The initialization vector (IV) used for the first block in CBC mode.  Can only be a 128-bit value.
/// * `is_encrypt` - A boolean indicating whether to encrypt (true) or decrypt (false).
///
/// # Returns
/// A vector of processed blocks after applying AES in CBC mode.
pub fn aes_cbc(key: &[u8], data: &mut [u8], iv: u128, is_encrypt: bool) {
  assert!(
    data.len() % BLOCKLEN == 0,
    "Data length must be a multiple of {} bytes.",
    BLOCKLEN
  );

  // Create copy of data with IV prepended
  let mut iv_copy: [u8; BLOCKLEN] = iv.to_be_bytes();
  let mut xor_copy: Vec<u8> = Vec::with_capacity(data.len());
  xor_copy.extend_from_slice(&iv.to_be_bytes());
  xor_copy.extend_from_slice(data.split_at(data.len() - BLOCKLEN).0);

  for block in data.chunks_mut(BLOCKLEN) {
    // For encryption perform XOR
    if is_encrypt {
      block.iter_mut().enumerate().for_each(|(i, byte)| {
        *byte ^= iv_copy[i];
      });
    }

    // Perform forward/inverse cipher
    let temp_block = match key.len() {
      16 => aes_128(
        key.try_into().unwrap(),
        block.try_into().unwrap(),
        is_encrypt,
      ),
      24 => aes_192(
        key.try_into().unwrap(),
        block.try_into().unwrap(),
        is_encrypt,
      ),
      32 => aes_256(
        key.try_into().unwrap(),
        block.try_into().unwrap(),
        is_encrypt,
      ),
      _ => panic!("Invalid key length. Must be 128, 192, or 256 bits."),
    };
    block.copy_from_slice(&temp_block);

    // For encryption, copy the current block to the xor_copy for the next iteration
    if is_encrypt {
      iv_copy.copy_from_slice(block);
    }
  }

  // For decryption perform XOR
  if !is_encrypt {
    data.iter_mut().enumerate().for_each(|(i, byte)| {
      *byte ^= xor_copy[i];
    });
  }
}

// ------------------------------------------ Unit Tests ------------------------------------------
#[cfg(test)]
mod tests {
  use super::*;

  /// Example from: SP800-38A, Appendix F
  #[test]
  fn test_aes_128_cbc() {
    let key: [u8; 16] = 0x2b7e151628aed2a6abf7158809cf4f3c_u128.to_be_bytes();
    let iv: u128 = 0x00010203_04050607_08090a0b_0c0d0e0f;
    let plaintext: [u8; 64] = [
      0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17,
      0x2A, 0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF,
      0x8E, 0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A,
      0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B,
      0xE6, 0x6C, 0x37, 0x10,
    ];
    let exp_ciphertext: [u8; 64] = [
      0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19,
      0x7d, 0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76,
      0x78, 0xb2, 0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22,
      0x22, 0x95, 0x16, 0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30,
      0x75, 0x86, 0xe1, 0xa7,
    ];
    test_aes_cbc_comm(&key, plaintext, exp_ciphertext, iv);
  }

  #[test]
  fn test_aes_192_cbc() {
    let key: [u8; 24] = [
      0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79,
      0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b,
    ];
    let iv: u128 = 0x00010203_04050607_08090a0b_0c0d0e0f;
    let plaintext: [u8; 64] = [
      0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17,
      0x2A, 0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF,
      0x8E, 0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A,
      0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B,
      0xE6, 0x6C, 0x37, 0x10,
    ];
    let exp_ciphertext: [u8; 64] = [
      0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71,
      0xe8, 0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76, 0x3f, 0x69,
      0x14, 0x5a, 0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9, 0xba, 0xac, 0x3d,
      0xf1, 0x02, 0xe0, 0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81, 0xd9, 0x20, 0xa9, 0xe6,
      0x4f, 0x56, 0x15, 0xcd,
    ];
    test_aes_cbc_comm(&key, plaintext, exp_ciphertext, iv);
  }

  #[test]
  fn test_aes_256_cbc() {
    let key: [u8; 32] = [
      0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77,
      0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14,
      0xdf, 0xf4,
    ];
    let iv: u128 = 0x00010203_04050607_08090a0b_0c0d0e0f;
    let plaintext: [u8; 64] = [
      0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17,
      0x2A, 0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF,
      0x8E, 0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A,
      0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B,
      0xE6, 0x6C, 0x37, 0x10,
    ];
    let exp_ciphertext: [u8; 64] = [
      0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba, 0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb,
      0xd6, 0x9c, 0xfc, 0x4e, 0x96, 0x7e, 0xdb, 0x80, 0x8d, 0x67, 0x9f, 0x77, 0x7b, 0xc6, 0x70,
      0x2c, 0x7d, 0x39, 0xf2, 0x33, 0x69, 0xa9, 0xd9, 0xba, 0xcf, 0xa5, 0x30, 0xe2, 0x63, 0x04,
      0x23, 0x14, 0x61, 0xb2, 0xeb, 0x05, 0xe2, 0xc3, 0x9b, 0xe9, 0xfc, 0xda, 0x6c, 0x19, 0x07,
      0x8c, 0x6a, 0x9d, 0x1b,
    ];
    test_aes_cbc_comm(&key, plaintext, exp_ciphertext, iv);
  }

  fn test_aes_cbc_comm(key: &[u8], plaintext: [u8; 64], exp_ciphertext: [u8; 64], iv: u128) {
    println!("---------------------Before Encryption:---------------------\n");
    println!("plaintext: {:x?}", plaintext);
    println!("key: {:x?}", key);

    let mut act_ciphertext: [u8; 64] = plaintext;
    aes_cbc(key, &mut act_ciphertext, iv, true);

    println!("---------------------After Encryption:---------------------\n");
    println!("actual ciphertext: {:x?}", act_ciphertext);
    println!("expected ciphertext: {:x?}\n", exp_ciphertext);
    assert_eq!(exp_ciphertext, act_ciphertext);

    let mut act_plaintext = act_ciphertext;
    aes_cbc(key, &mut act_plaintext, iv, false);

    println!("---------------------After Decryption:---------------------\n");
    println!("actual plaintext: {:x?}", act_plaintext);
    println!("expected plaintext: {:x?}", plaintext);
    assert_eq!(plaintext, act_plaintext);
  }
}
