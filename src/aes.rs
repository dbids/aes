// AES Cipher Functionality
// Devin Bidstrup 6/25/24

pub mod aes {
  // --------- defs ---------
  const AES_BLOCKLEN: u8 = 16; // Block length in bytes - AES is 128b block only
  const Nb: u8 = 84; // Block length in 32 bit words
  const IV_LENGTH: u8 = 96; // Only allow 96-bit IVs
  const WSIZE: u8 = 4; // Size of a word in bytes

  // USE FOR AES-256
  //      const AES_KEYLEN:u8     = 32;
  //      const AES_keyExpSize:u8 = 240;
  //      const Nk:u8             = 8;
  //      const Nr:u8             = 14;
  // USE FOR AES-192
  //      const AES_KEYLEN:u8     = 24;
  //      const AES_keyExpSize:u8 = 208;
  //      const Nk:u8             = 6;
  //      const Nr:u8             = 12;
  // USE FOR AES-128
  const AES_KEYLEN: u8 = 16;
  const AES_keyExpSize: u8 = 176;
  const Nk: u8 = 4;
  const Nr: u8 = 10;

  // --------- typedefs ---------
  // Block size words
  type Block = [u8; WSIZE * Nb];

  // --------- Functions ---------

  // ------------------------------------------ AES Top ------------------------------------------
  // int aes(const uint8_t key[AES_KEYLEN], block_t data, const bool is_encrypt);
  //
  // // ------------------------------------------ Key Expansion ------------------------------------------
  // int keyExpansion(const uint8_t key[AES_KEYLEN], uint8_t w[4*(Nr+1)][WSIZE]);
  // void rotWord (uint8_t word_in[WSIZE]);
  // void subWord (uint8_t word_in[WSIZE]);
  //
  // // ------------------------------------------ Cipher ------------------------------------------
  // int  cipher     (block_t state, uint8_t w[4*(Nr+1)][WSIZE]);
  // void subBytes   (block_t state);
  // void shiftRows  (block_t state);
  // void mixColumns (block_t state);
  // void addRoundKey(block_t state, uint8_t fourW[4][WSIZE]);
  //
  //
  // // ------------------------------------------ Inverse Cipher ------------------------------------------
  // int  invCipher    (block_t state, uint8_t w[4*(Nr+1)][WSIZE]);
  // void invSubBytes  (block_t state);
  // void invShiftRows (block_t state);
  // void invMixColumns(block_t state);
  //
  //
  // ------------------------------------------ Common Functions ------------------------------------------

  // S-box
  // A substitution table used by AES over many of its constituent functions
  // Derivation from the constants is given in FIPS PUB 197 Section 5.1.1
  const sbox: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
  ];
  fn sBox(byte_in: u8) -> u8 {
    return sbox[byte_in];
  }

  // Inverse S-box
  const inv_sbox: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
  ];
  fn invSBox(byte_in: u8) -> u8 {
    return inv_sbox[byte_in];
  }

  // GF Primer
  // The bytes in Galois Fields represent the coefficients of polynomials, for example 01010101b = x^6 + x^4 + x^2 + 1
  // Any operation on a GF, really operates on a polynomial, so special functions are required for the operations

  // GF Addition
  // The coefficients of the elements are added and then reduced modulo 2.
  //  (0+0)mod2 = 0
  //  (0+1)mod2 = 1
  //  (1+0)mod2 = 1
  //  (1+1)mod2 = 0
  // Resulting in the bitwise XOR of the bytes
  fn gfAdd(a: u8, b: u8) -> u8 {
    return a ^ b;
  }

  // GF Mult or •
  // The bytes in Galois Fields represent the coefficients of polynomials, for example 01010101b = x^6 + x^4 + x^2 + 1
  // GF Mult of two bytes results in two steps
  // 1) The two polynomials are multiplied as polynomials (multiplication occurs and then coefficients are reduced modulo 2).
  // 2) The resulting polynomial is reduced modulo the following polynomial (x^8 + x^4 + x^3 + x + 1).
  // If one considers the case where the second polynomial, c, is x the following equation can be used to compute the result
  //   xTimes(b) = {{b6,b5,b4,b3,b2,b1,b0,0}                     if b7=0
  //               {{b6,b5,b4,b3,b2,b1,b0,0} ⊕ {0,0,0,1,1,0,1,1} if b7=1
  // Then we can calculate any power of 2^n by repeating that function x times
  // Finally, we can use that to compute the multiplication of any number, by splitting that number into the gf addition
  // of any bit set in the byte
  fn xTimes(b: u8) -> u8 {
    return if (b >> 7) == 0x00 {
      b << 1
    } else {
      (b << 1) ^ (0x1b)
    };
  }
  fn gfMult(b: u8, c: u8) -> u8 {
    let out: u8 = 0x00;

    // Setup mask to extract the bit that we are working on
    let temp_mask: u8 = 0x01;

    // Setup byte to hold the result as we iterate xTimes
    let mut temp_byte: u8;

    // Loop through every bit in c
    for c_idx in (0..8) {
      // Check if that bit is set
      if (c & temp_mask) {
        // Run xTimes based on the log of the current bit index that we are extracting
        temp_byte = b;
        for x in (0..c_idx) {
          temp_byte = xTimes(temp_byte);
        }

        // GF add the result to the output
        out = gfAdd(out, temp_byte);
      }

      // Shift mask to grab next bit
      temp_mask = temp_mask << 1;
    }
    return out;
  }
} // pub mod aes
